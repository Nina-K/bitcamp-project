package bitcamp.java89.ems;

import java.util.Scanner;

public class ClassroomController2 {
  private LinkedList<Classroom> list;
  private Scanner keyScan;

  public ClassroomController2(Scanner keyScan) {
    list = new LinkedList<Classroom>();
    this.keyScan = keyScan;
  }

  public void service() {
    loop:
    while (true) {
      System.out.print("강의실관리> ");
      String command = keyScan.nextLine().toLowerCase();

      switch (command) {
        case "add": this.doAdd(); break;
        case "list": this.doList(); break;
        case "view": this.doView(); break;
        case "delete": this.doDelete(); break;
        case "update": this.doUpdate(); break;
        case "main":
          break loop;
        default:
          System.out.println("지원하지 않는 명령어입니다.");
      }
    }
  }


  private void doList() {
    for (int i = 0; i < list.size(); i++) {
      Classroom classroom = list.get(i);

      System.out.printf("%s, %d, %d, %s, %s, %s, %s, %s, %s\n",
        classroom.name,
        classroom.floors,
        classroom.maximumSeating,
        classroom.maximumPeriod,
        classroom.time,
        classroom.password,
        ((classroom.projector)?"yes":"no"),
        ((classroom.locker)?"yes":"no"),
        ((classroom.conditioner)?"yes":"no"));
    }
  }

  private void doAdd() {
    while(true) {
    try {
      Classroom classroom = new Classroom();

      System.out.print("강의실이름(예:강의실301호)? ");
      classroom.name = this.keyScan.nextLine();

      System.out.print("층수(예:3)? ");
      classroom.floors = Integer.parseInt(this.keyScan.nextLine());

      System.out.print("최대수용인원(예:30)? ");
      classroom.maximumSeating = Integer.parseInt(this.keyScan.nextLine());

      System.out.print("최대이용기간(예:6개월)? ");
      classroom.maximumPeriod = this.keyScan.nextLine();

      System.out.print("이용시간(예:08:00~22:00)? ");
      classroom.time = this.keyScan.nextLine();

      System.out.print("암호(예:0000)? ");
      classroom.password = this.keyScan.nextLine();

      System.out.print("프로젝터 여부(y/n)? ");
      classroom.projector = (this.keyScan.nextLine().equals("y")) ? true : false;

      System.out.print("사물함 여부(y/n)? ");
      classroom.locker = (this.keyScan.nextLine().equals("y")) ? true : false;

      System.out.print("에어컨 여부(y/n)? ");
      classroom.conditioner = (this.keyScan.nextLine().equals("y")) ? true : false;

      list.add(classroom);

    } catch (Exception e) {
      System.out.println("실행 중 오류가 발생했습니다.");
    }
    System.out.print("계속 입력하시겠습니까(y/n)? ");
    if (!this.keyScan.nextLine().equals("y"))
        break;
    } // while - 이렇게 붙임으로써 어느 블록인지를 표시해둔다.
  }

   private void doView() {
     try {
     System.out.print("강의실의 인덱스? ");
     int index = Integer.parseInt(this.keyScan.nextLine().toLowerCase());

     Classroom classroom = list.get(index); //타입캐스팅해줘야한다. Object이므로.

     System.out.printf("강의실 이름: %s\n", classroom.name);
     System.out.printf("층수: %d\n", classroom.floors);
     System.out.printf("최대수용인원: %d\n", classroom.maximumSeating);
     System.out.printf("최대이용기간: %s\n", classroom.maximumPeriod);
     System.out.printf("이용시간: %s\n", classroom.time);
     System.out.printf("암호: (****)\n");
     System.out.printf("프로젝터 여부: %b\n", (classroom.projector) ? "Yes" : "No");
     System.out.printf("사물함 여부: %b\n", (classroom.locker) ? "Yes" : "No");
     System.out.printf("에어컨 여부: %b\n", (classroom.conditioner) ? "Yes" : "No");

   } catch (IndexOutOfBoundsException e) {
     System.out.println("인덱스가 유효하지 않습니다.");
   } catch (Exception e) {
     System.out.println("인덱스 값이 잘못되었거나, 조회 중 오류가 발생했습니다.");
   }
 }

    private void doDelete() {
      System.out.print("삭제할 강의실의 인덱스? ");
      int index = Integer.parseInt(keyScan.nextLine());

      if (index < 0 || index >= list.size()) {
        System.out.println("인덱스가 유효하지 않습니다.");
        return;
      }

      Classroom deletedClassroom = list.remove(index);
      //리무브할 때 리턴값이 리무브 되기 전 값
      //삭제될 값을 꼭 넘겨준다. 삭제될 거 필요하면 쓰라고.

      System.out.printf("%s 강의실 정보를 삭제하였습니다.\n", deletedClassroom.name);

    }

    private void doUpdate() {

      try {
      System.out.print("변경할 강의실 인덱스? ");
      int index = Integer.parseInt(keyScan.nextLine());

        Classroom oldClassroom = list.get(index);

        Classroom classroom = new Classroom();
        System.out.print("층수? ");
        classroom.floors = Integer.parseInt(this.keyScan.nextLine());

        System.out.printf("최대수용인원(%d)? ", oldClassroom.maximumSeating);
        classroom.maximumSeating = Integer.parseInt(this.keyScan.nextLine());

        System.out.printf("최대이용기간(%s)? ", oldClassroom.maximumPeriod);
        classroom.maximumPeriod = this.keyScan.nextLine();

        System.out.printf("이용시간(%s)? ", oldClassroom.time);
        classroom.time = this.keyScan.nextLine();

        System.out.printf("암호(%s)? ", oldClassroom.password);
        classroom.password = this.keyScan.nextLine();

        System.out.print("프로젝터 여부(y/n)? ");
        classroom.projector = (this.keyScan.nextLine().equals("y")) ? true : false;

        System.out.print("사물함 여부(y/n)? ");
        classroom.locker = (this.keyScan.nextLine().equals("y")) ? true : false;

        System.out.print("에어컨 여부(y/n)? ");
        classroom.conditioner = (this.keyScan.nextLine().equals("y")) ? true : false;

        System.out.print("저장하시겠습니까? ");
        if (keyScan.nextLine().toLowerCase().equals("y")) {
          classroom.name = oldClassroom.name;
          list.set(index, classroom);
          System.out.println("저장하였습니다.");
            } else {
              System.out.println("변경을 취소하였습니다.");
            }
        } catch (IndexOutOfBoundsException e) {
          System.out.println("인덱스가 유효하지 않습니다.");
        } catch (Exception e) {
          System.out.println("인덱스 값이 잘못되었거나, 조회 중 오류가 발생했습니다.");
          /*예외 처리가 뭐하는 문법인지, 뭐가 좋은지?
            => 예외 처리를 사용하면, 프로그램 실행 중 오류가 발생했을 때,
               시스템을 멈추게 하지 않고 계속해서 할 수 있게 하기 위함이다.
               적절한 조치를 취했기에 시스템은 계속 할 수 있다.

               정상적인 코드와 예외처리 코드를 따로 둠으로써 소스코드의 가독성을 높인다. */
        }
    }
  }
