[v0.7]
구현할 기능:
=> EduApp에 있던 학생관리 명령어 처리를
   학생관리 전문가인 StudentController로 이전한다.
=> EduApp은 대신 메뉴 선택 기능을 추가한다.

산출물:
=> Teacher.java
=> EduApp.java (변경)
=> TeacherController.java (변경)

학습목표:
=> 리팩토링(refactoring)을 통해 명령어 코드를 관련된 클래스에 분류시키는 것.
=> 객체지향 설계 방법론 중에서 "응집력 높히기(high cohesion)"을 이해한다.
   High Cohesion? 한 클래스는 한 가지 역할에 집중해야 한다.
   => 한 클래스가 여러 가지 일을 하면 클래스 코드가 커지고, 유지보수에 안좋다.
=> 메서드나 변수에 대해 접근을 제어하는 방법과 이유를 이해한다.
   => StudentController의 doXxx() 메서드들을 private 으로 접근을 제한한다.
   => 이 클래스의 내부 변수들도 private으로 접근을 제한한다.




[v0.6]
구현할 기능:
=> 삭제 기능 추가

   명령> delete
   삭제할 학생의 아이디는? hong
   hong 학생 정보를 삭제하였습니다.
   명령>

   명령> delete
   삭제할 학생의 아이디는? hong2
   hong2 이라는 학생이 없습니다.
   명령>

=> 변경 기능 추가
   명령> update
   변경할 학생의 아이디는? hong
   암호? 1111
   이름? 임꺽정
   전화? 111-1212
   이메일? lemm@test.com
   재직중(y/n)? y
   태어난해? 1980
   최종학교? 1
   저장하시겠습니까(y/n)? y
   저장하였습니다.
   명령>

   ...
   저장하시겠습니까(y/n)? b
   변경을 취소하였습니다.
   명령>

   ...
   명령> update
   변경할 학생의 아이디는? hong
   hong 이라는 학생이 없습니다.

산출물:
=> Teacher.java
=> EduApp.java (변경)
=> TeacherController.java (변경)

학습목표:
=> 삭제와 변경을 추가하여 CRUD(Create/Read/Update/Delete) 기본 기능을 완성한다.
=> 기존의 코드에 새 기능을 추가하는 경험을 해본다.
   이것이 유지보수 개발업무이다.




[v0.5]
구현할 기능:
=> StudentController 클래스를 확장해서 사용할 수 있도록 ,
   학생 목록을 스태틱 변수로 저장하지 말고, 인스턴스 변수로 저장한다.
=> 그에 따라 명령어를 처리하는 메서드도 인스턴스 메서드로 전환한다.


산출물:
=> Teacher.java
=> EduApp.java (변경)
=> TeacherController.java (변경)

학습목표:
=> 인스턴스 변수와 인스턴스 메서드의 사용법을 익힌다.
=> 생성자의 용도를 다시 한 번 확인한다.



[v0.4]
구현할 기능:
=> 소스코드 리팩토링(refactoring)
  => 유지보수하기 좋게 소스 코드를 좀 더 객체지향적으로 정리한다.
=> EduApp에 있는 Student 데이터의 입출력을 다루는데 관련된 메서드를
   따로 다른 클레스로 분류한다.

산출물:
=> Teacher.java
=> EduApp.java
=> TeacherController.java (추가)

학습목표:
=> 클래스 문법의 용도를 다시 한 번 익힌다.
  => 클래스는 특정 작업과 관련된 메서드를 관리하기 좋게 분류할 때 사용한다.



[v0.3]
구현할 기능:
=> 사용자에게 명령어를 입력 받는 프롬프트 기능을 추가한다.
예) 프로그램을 시작시키면 다음과 같이 동작한다.
명령> add
아이디(예:hong)? 5
암호(예:1234)? 5
이름(예:홍길동)? 5
이메일(예:hong@test.com)? 5
전화(예:010-1111-2222)? 5
나이(예:39)? 5
담당과목(예:자바)? 5
경력(예:10)? 5
연봉(예:8500)? 5
주소(예:서울시 서초구 서초동)? 5
계속 입력하시겠습니까(y/n)? n
명령> list
1, 1, 1, 1, 1, 1, 1, 1, 1, 1
명령> view
학생(나는 강사?) 아이디? hong
아이디: 5
암호: 5
이름: 5
이메일: 5
전화: 5
나이: 5
담당과목: 5
경력: 5
연봉: 5
주소: 5


산출물:
학습목표:
=> 반복문 중첩해서 사용하는 방법을 익힌다.
=> 입력 코드를 별도의 메서드로 분리하여 유지보수 하기 좋은 코드를 만드는 것을 익힌다.
